{
  "name": "GPT n8n-workflow maker- Action nodes properties",
  "nodes": [
    {
      "parameters": {
        "values": {
          "string": [
            {
              "name": "Examples",
              "value": "={\"Q\": \"Every time a new form gets submitted, check if there is a blog entry from contentfull that matches the form's subject\", \"current_automation_step\": \"Action: Get list of Slack messages\", \"action_possibilities\": [ { \"operation\": \"get\", \"resource\": \"space\" }, { \"operation\": \"get\", \"resource\": \"contentType\" }, { \"operation\": \"get\", \"resource\": \"entry\" }, { \"operation\": \"getAll\", \"resource\": \"entry\" }, { \"operation\": \"get\", \"resource\": \"asset\" }, { \"operation\": \"getAll\", \"resource\": \"asset\" }, { \"operation\": \"getAll\", \"resource\": \"locale\" } ]} \n{ \"operation\": \"getAll\", \"resource\": \"entry\" }"
            },
            {
              "name": "Intro",
              "value": "=You are tasked with setting up automation parameters, you are to choose the correct operation and resource combination to perform the current_step task. Output in valid JSON format."
            },
            {
              "name": "Run_Context",
              "value": "={\"Q\": \"{{$json[\"Q\"]}}\", \"current_automation_step\": \"{{$json[\"current_step\"]}}\", \"action_possibilities\": {{JSON.stringify($node[\"Item Lists\"].json[\"data\"])}}}"
            },
            {
              "name": "Instantiator",
              "value": "="
            }
          ]
        },
        "options": {}
      },
      "id": "9915f909-972c-4fe9-a73c-a8b351eaefab",
      "name": "Prompt parts , From Q to Steps",
      "type": "n8n-nodes-base.set",
      "typeVersion": 1,
      "position": [
        1200,
        360
      ]
    },
    {
      "parameters": {
        "values": {
          "string": [
            {
              "name": "Prompt",
              "value": "={{$json[\"Intro\"]}}\n{{$json[\"Examples\"]}}\n{{$json[\"Run_Context\"]}}"
            }
          ]
        },
        "options": {}
      },
      "id": "99f9d639-0a35-415e-9803-48d571c478b4",
      "name": "Prompt parts , From Q to Steps1",
      "type": "n8n-nodes-base.set",
      "typeVersion": 1,
      "position": [
        1340,
        360
      ]
    },
    {
      "parameters": {
        "authentication": "genericCredentialType",
        "genericAuthType": "httpHeaderAuth",
        "requestMethod": "POST",
        "url": "https://api.openai.com/v1/completions",
        "options": {},
        "bodyParametersUi": {
          "parameter": [
            {
              "name": "model",
              "value": "text-davinci-002"
            },
            {
              "name": "prompt",
              "value": "={{$json[\"Prompt\"]}}"
            },
            {
              "name": "max_tokens",
              "value": "={{600}}"
            },
            {
              "name": "temperature",
              "value": "={{0.3}}"
            }
          ]
        }
      },
      "id": "b74316b0-7430-4945-a7cf-b6d6dc941312",
      "name": "HTTP Request",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 2,
      "position": [
        1480,
        360
      ],
      "credentials": {
        "httpHeaderAuth": {
          "id": "14",
          "name": "Open AI personal account"
        }
      }
    },
    {
      "parameters": {
        "functionCode": "let myValues = [];\nfor (item of items) {\n  let strings = item.json.choices[0].text.trim().split('\\n');\n  \n  for (string of strings){\n    let string_without_slashes = string.replace(/\\\\/g, \"\")\n    let parsed_strings = JSON.parse(string_without_slashes)\n    myValues.push(parsed_strings);\n  }\n}\n\n\nvar filtered = myValues.filter(elm => elm)\n\nconsole.log(filtered)\n\nconst obj = Object.fromEntries(filtered.flatMap(Object.entries));\n\nconsole.log(obj)\n\nreturn {\n      json: obj\n    };"
      },
      "id": "e40df115-1c08-4cb9-a060-ac955ff0930e",
      "name": "Function",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        1260,
        840
      ],
      "disabled": true
    },
    {
      "parameters": {
        "values": {
          "string": [
            {
              "name": "example1_json_reference",
              "value": "{{$json.status}}"
            },
            {
              "name": "example2_json_reference",
              "value": "{{$json.total}}"
            },
            {
              "name": "example3_json_reference",
              "value": "{{$json.email}}"
            },
            {
              "name": "Q",
              "value": "={{ $json[\"Q\"] }}"
            },
            {
              "name": "current_step",
              "value": "={{ $json[\"values\"] }}"
            }
          ]
        },
        "options": {}
      },
      "id": "32946f35-8d1f-43cf-9554-2bf4850d9c44",
      "name": "Set",
      "type": "n8n-nodes-base.set",
      "typeVersion": 1,
      "position": [
        1060,
        360
      ]
    },
    {
      "parameters": {
        "jsCode": "// Loop over input items and add a new field\n// called 'myNewField' to the JSON of each one\n\nnew_items = []\n\nfor (const item of $input.all()) {\n  var new_item = {\"json\":{parameters:item.json.response}}\n  //item.json.conditions = JSON.parse(JSON.stringify(conditions))\n  new_items.push(new_item)\n}\n\nreturn new_items;"
      },
      "id": "e6d18bc0-2288-41ad-91c9-45b69fd7d2cc",
      "name": "building the parameters JSON",
      "type": "n8n-nodes-base.code",
      "typeVersion": 1,
      "position": [
        1760,
        360
      ]
    },
    {
      "parameters": {},
      "id": "af9d503e-8799-4eef-a84f-d2685df03b1d",
      "name": "When Called By Another Workflow",
      "type": "n8n-nodes-base.executeWorkflowTrigger",
      "typeVersion": 1,
      "position": [
        20,
        440
      ]
    },
    {
      "parameters": {
        "operation": "query",
        "projectId": "womespaces",
        "query": "={\"structuredQuery\": {\"from\": [{ \"collectionId\": \"operation_options\"}],\"where\": {\"fieldFilter\": {\"field\": { \"fieldPath\": \"name\" },\"op\": \"EQUAL\",\"value\": {\"stringValue\": \"{{$json.selected_node}}\" }}}}}"
      },
      "id": "2220f523-f34a-43cb-adde-9814b2bc2712",
      "name": "Google Cloud Firestore",
      "type": "n8n-nodes-base.googleFirebaseCloudFirestore",
      "typeVersion": 1,
      "position": [
        200,
        800
      ],
      "alwaysOutputData": true,
      "credentials": {
        "googleFirebaseCloudFirestoreOAuth2Api": {
          "id": "16",
          "name": "Google Firebase Cloud Firestore account"
        }
      }
    },
    {
      "parameters": {
        "keepOnlySet": true,
        "values": {
          "string": [
            {
              "name": "operation",
              "value": "={{ $json[\"operation\"] }}"
            },
            {
              "name": "resource",
              "value": "={{ $json[\"resource\"] }}"
            }
          ]
        },
        "options": {}
      },
      "id": "c759137f-c2d7-4f35-ac79-962c737d6adf",
      "name": "Set1",
      "type": "n8n-nodes-base.set",
      "typeVersion": 1,
      "position": [
        360,
        800
      ]
    },
    {
      "parameters": {
        "operation": "aggregateItems",
        "aggregate": "aggregateAllItemData"
      },
      "id": "537a4f43-1f58-4865-ba7c-93e80710d529",
      "name": "Item Lists",
      "type": "n8n-nodes-base.itemLists",
      "typeVersion": 1,
      "position": [
        500,
        800
      ]
    },
    {
      "parameters": {
        "mode": "combine",
        "mergeByFields": {
          "values": [
            {
              "field1": "selected_node",
              "field2": "name"
            }
          ]
        },
        "joinMode": "enrichInput1",
        "options": {}
      },
      "id": "00a97b77-baca-4e90-ba36-8becfc555d05",
      "name": "Merge",
      "type": "n8n-nodes-base.merge",
      "typeVersion": 2,
      "position": [
        480,
        360
      ],
      "alwaysOutputData": false,
      "continueOnFail": true
    },
    {
      "parameters": {
        "mode": "runOnceForEachItem",
        "jsCode": "// Add a new field called 'myNewField' to the\n// JSON of the item\nvar myNewField = $json.choices[0].text.trim().split('\\n');\nvar response = JSON.parse(myNewField[0]);\n$input.item.json.response = response\n//$input.item.json.resource = response.resource;\n//$input.item.json.operation = response.operation;\nreturn $input.item;"
      },
      "id": "e921596c-4a8e-490e-bcfe-5740cb426b32",
      "name": "Code",
      "type": "n8n-nodes-base.code",
      "typeVersion": 1,
      "position": [
        1620,
        360
      ]
    },
    {
      "parameters": {
        "values": {
          "string": [
            {
              "name": "name",
              "value": "={{$node[\"Google Cloud Firestore\"].json[\"name\"]}}"
            }
          ]
        },
        "options": {}
      },
      "id": "ca87dd61-e7d7-4f3f-b3ae-4c2112a6eeb9",
      "name": "Set2",
      "type": "n8n-nodes-base.set",
      "typeVersion": 1,
      "position": [
        840,
        800
      ]
    },
    {
      "parameters": {
        "conditions": {
          "string": [
            {
              "value1": "={{ $json[\"data\"] }}",
              "operation": "isNotEmpty"
            }
          ]
        }
      },
      "id": "8b5ba6dc-421f-4e83-b1e5-87610880c339",
      "name": "IF",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [
        700,
        360
      ]
    },
    {
      "parameters": {
        "keepOnlySet": true,
        "values": {
          "string": [
            {
              "name": "parameters",
              "value": "={{{}}}"
            },
            {
              "name": "values",
              "value": "={{ $json[\"values\"] }}"
            }
          ]
        },
        "options": {}
      },
      "id": "09af3c7e-93d2-44ca-8bb5-5f63b138be42",
      "name": "Set3",
      "type": "n8n-nodes-base.set",
      "typeVersion": 1,
      "position": [
        1560,
        660
      ]
    },
    {
      "parameters": {},
      "id": "4d390ded-acbc-48f8-8c09-711c0a711e40",
      "name": "Merge1",
      "type": "n8n-nodes-base.merge",
      "typeVersion": 2,
      "position": [
        2400,
        920
      ],
      "disabled": true
    },
    {
      "parameters": {
        "values": {
          "string": [
            {
              "name": "values",
              "value": "={{$node[\"Prompt parts , From Q to Steps1\"].json[\"values\"]}}"
            }
          ]
        },
        "options": {}
      },
      "id": "9d60a028-d8a8-4eeb-9b82-648cdf74eece",
      "name": "Set4",
      "type": "n8n-nodes-base.set",
      "typeVersion": 1,
      "position": [
        1900,
        360
      ]
    },
    {
      "parameters": {},
      "id": "b1ef7c7f-f6fa-463e-b5af-1193f866a4ed",
      "name": "NoOp",
      "type": "n8n-nodes-base.noOp",
      "typeVersion": 1,
      "position": [
        2460,
        420
      ]
    },
    {
      "parameters": {},
      "id": "1592010f-a5f3-4b21-a4e3-3ee4ab025d11",
      "name": "Merge2",
      "type": "n8n-nodes-base.merge",
      "typeVersion": 2,
      "position": [
        3080,
        360
      ]
    },
    {
      "parameters": {
        "conditions": {
          "string": [
            {
              "value1": "{{$json.parameters}}",
              "operation": "isEmpty"
            }
          ]
        }
      },
      "id": "b8c8960d-22e9-47a6-ad6a-f8dab68ccb49",
      "name": "IF1",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [
        2680,
        560
      ]
    },
    {
      "parameters": {
        "conditions": {
          "string": [
            {
              "value1": "{{$json.parameters}}",
              "operation": "isNotEmpty"
            }
          ]
        }
      },
      "id": "d22d2753-ac3a-403f-862d-3b8f0491a588",
      "name": "IF2",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [
        2680,
        320
      ]
    }
  ],
  "pinData": {},
  "connections": {
    "Prompt parts , From Q to Steps": {
      "main": [
        [
          {
            "node": "Prompt parts , From Q to Steps1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Prompt parts , From Q to Steps1": {
      "main": [
        [
          {
            "node": "HTTP Request",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "HTTP Request": {
      "main": [
        [
          {
            "node": "Code",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Set": {
      "main": [
        [
          {
            "node": "Prompt parts , From Q to Steps",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "When Called By Another Workflow": {
      "main": [
        [
          {
            "node": "Google Cloud Firestore",
            "type": "main",
            "index": 0
          },
          {
            "node": "Merge",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Google Cloud Firestore": {
      "main": [
        [
          {
            "node": "Set1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Set1": {
      "main": [
        [
          {
            "node": "Item Lists",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Item Lists": {
      "main": [
        [
          {
            "node": "Set2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge": {
      "main": [
        [
          {
            "node": "IF",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code": {
      "main": [
        [
          {
            "node": "building the parameters JSON",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Set2": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "IF": {
      "main": [
        [
          {
            "node": "Set",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Set3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "building the parameters JSON": {
      "main": [
        [
          {
            "node": "Set4",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Set3": {
      "main": [
        [
          {
            "node": "NoOp",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Set4": {
      "main": [
        [
          {
            "node": "NoOp",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "NoOp": {
      "main": [
        [
          {
            "node": "IF1",
            "type": "main",
            "index": 0
          },
          {
            "node": "IF2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "IF1": {
      "main": [
        [
          {
            "node": "Merge2",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "IF2": {
      "main": [
        [
          {
            "node": "Merge2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {
    "saveManualExecutions": true,
    "callerPolicy": "any"
  },
  "hash": "0c1be4e31e79d196c0ed094cf126b498",
  "id": 1029,
  "meta": {
    "instanceId": "ed6ef39cc6422be5fc30d4cdc419aa16ae92ea01e88abf334b379f622c4984f7"
  },
  "tags": []
}
